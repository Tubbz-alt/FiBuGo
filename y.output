Nonterminals useless in grammar

   block
   stmt_list
   stmt
   declaration
   tuple
   factor_list
   arithmetic_exp
   term
   RHS
   function_call
   factor
   assignment_op
   assignment
   LHS
   loop
   while
   for
   for_stmt
   for_init
   if_stmt
   bool_exp
   comparison
   compared
   relational_op
   logic_op


Terminals unused in grammar

   TRUE
   FALSE
   AND_OP
   OR_OP
   DOLLAR_SIGN
   AT_SIGN
   NOT_OP
   IF
   ELIF
   ELSE
   WHILE
   FOR
   BREAK
   CONTINUE
   RETURN
   BLTIN_SHOW_ON_MAP
   BLTIN_SEARCH_LOCATION
   BLTIN_GET_ROAD_SPEED
   BLTIN_GET_LOCATION
   BLTIN_TARGET
   BLTIN_GET_ROADS
   BLTIN_GET_CROSSROADS
   BLTIN_GET_CROSSROADS_NUM
   BLTIN_GET_ROADS_NUM
   LESS_EQ_OP
   GREATER_EQ_OP
   NOT_EQ_OP
   EQUALITY_OP
   LESS_OP
   GREATER_OP
   EQUAL_OP
   INCREMENT_OP
   DECREMENT_OP
   MULTIPLY_OP
   DIVIDE_OP
   SUB_OP
   ADD_OP
   MOD_OP
   POW_OP
   INT_LITERAL
   FLOAT_LITERAL
   STR_LITERAL
   CHAR_LITERAL
   SEMICOLON
   CURLY_OPEN
   CURLY_CLOSE
   NEW_LINE
   WHITE_SPACE
   UNKNOWN_CHAR


Rules useless in grammar

   16 block: CURLY_OPEN stmt_list CURLY_CLOSE
   17      | CURLY_OPEN empty CURLY_CLOSE

   18 stmt_list: stmt
   19          | stmt_list stmt

   20 stmt: declaration SEMICOLON
   21     | assignment SEMICOLON
   22     | function_call SEMICOLON
   23     | CONTINUE SEMICOLON
   24     | RETURN SEMICOLON
   25     | RETURN IDENT SEMICOLON
   26     | RETURN factor SEMICOLON
   27     | loop
   28     | if_stmt

   29 declaration: data_type IDENT
   30            | declaration EQUAL_OP RHS
   31            | data_type AT_SIGN IDENT EQUAL_OP CURLY_OPEN factor_list CURLY_CLOSE
   32            | data_type DOLLAR_SIGN IDENT EQUAL_OP CURLY_OPEN factor_list CURLY_CLOSE

   33 tuple: LEFT_PARANT data_type COMMA data_type RIGHT_PARANT

   34 factor_list: factor
   35            | factor_list COMMA factor

   36 arithmetic_exp: term
   37               | arithmetic_exp ADD_OP term
   38               | arithmetic_exp SUB_OP term

   39 term: factor
   40     | IDENT
   41     | term MULTIPLY_OP factor
   42     | term DIVIDE_OP factor
   43     | term POW_OP factor
   44     | term MOD_OP factor

   45 RHS: arithmetic_exp
   46    | function_call
   47    | bool_exp
   48    | factor

   49 function_call: IDENT LEFT_PARANT parameter_list RIGHT_PARANT
   50              | BLTIN_SHOW_ON_MAP LEFT_PARANT parameter_list RIGHT_PARANT
   51              | BLTIN_SEARCH_LOCATION LEFT_PARANT parameter_list RIGHT_PARANT
   52              | BLTIN_GET_ROAD_SPEED LEFT_PARANT parameter_list RIGHT_PARANT
   53              | BLTIN_GET_LOCATION LEFT_PARANT parameter_list RIGHT_PARANT
   54              | BLTIN_TARGET LEFT_PARANT parameter_list RIGHT_PARANT
   55              | BLTIN_GET_ROADS LEFT_PARANT parameter_list RIGHT_PARANT
   56              | BLTIN_GET_CROSSROADS LEFT_PARANT parameter_list RIGHT_PARANT
   57              | BLTIN_GET_CROSSROADS_NUM LEFT_PARANT parameter_list RIGHT_PARANT
   58              | BLTIN_GET_ROADS_NUM LEFT_PARANT parameter_list RIGHT_PARANT

   59 factor: INT_LITERAL
   60       | FLOAT_LITERAL
   61       | STR_LITERAL
   62       | CHAR_LITERAL
   63       | tuple

   64 assignment_op: EQUAL_OP
   65              | MULTIPLY_OP
   66              | DIVIDE_OP
   67              | SUB_OP
   68              | ADD_OP
   69              | MOD_OP
   70              | POW_OP

   71 assignment: LHS assignment_op RHS
   72           | LHS INCREMENT_OP
   73           | LHS DECREMENT_OP

   74 LHS: IDENT

   75 loop: while
   76     | for

   77 while: WHILE LEFT_PARANT bool_exp RIGHT_PARANT block

   78 for: FOR LEFT_PARANT for_stmt RIGHT_PARANT block

   79 for_stmt: for_init SEMICOLON bool_exp SEMICOLON assignment

   80 for_init: declaration
   81         | assignment

   82 if_stmt: IF LEFT_PARANT bool_exp RIGHT_PARANT block
   83        | IF LEFT_PARANT function_call RIGHT_PARANT block
   84        | if_stmt ELIF LEFT_PARANT bool_exp RIGHT_PARANT block
   85        | if_stmt ELSE block

   86 bool_exp: comparison
   87         | IDENT
   88         | NOT_OP IDENT
   89         | TRUE
   90         | FALSE

   91 comparison: bool_exp relational_op compared
   92           | bool_exp logic_op compared
   93           | function_call relational_op compared

   94 compared: IDENT
   95         | FALSE
   96         | TRUE
   97         | factor

   98 relational_op: LESS_EQ_OP
   99              | GREATER_EQ_OP
  100              | NOT_EQ_OP
  101              | EQUALITY_OP
  102              | LESS_OP
  103              | GREATER_OP

  104 logic_op: AND_OP
  105         | OR_OP


Grammar

    0 $accept: program $end

    1 program: function
    2        | function program

    3 function: FUNC return_type IDENT LEFT_PARANT parameter_list RIGHT_PARANT

    4 return_type: data_type
    5            | empty

    6 parameter_list: empty
    7               | VOID
    8               | data_type IDENT
    9               | parameter_list COMMA data_type IDENT

   10 data_type: CHAR
   11          | INT
   12          | FLOAT
   13          | BOOL
   14          | STR

   15 empty: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
CHAR (258) 10
INT (259) 11
FLOAT (260) 12
BOOL (261) 13
STR (262) 14
VOID (263) 7
TRUE (264)
FALSE (265)
AND_OP (266)
OR_OP (267)
DOLLAR_SIGN (268)
AT_SIGN (269)
NOT_OP (270)
IDENT (271) 3 8 9
IF (272)
ELIF (273)
ELSE (274)
WHILE (275)
FOR (276)
BREAK (277)
CONTINUE (278)
FUNC (279) 3
RETURN (280)
BLTIN_SHOW_ON_MAP (281)
BLTIN_SEARCH_LOCATION (282)
BLTIN_GET_ROAD_SPEED (283)
BLTIN_GET_LOCATION (284)
BLTIN_TARGET (285)
BLTIN_GET_ROADS (286)
BLTIN_GET_CROSSROADS (287)
BLTIN_GET_CROSSROADS_NUM (288)
BLTIN_GET_ROADS_NUM (289)
LESS_EQ_OP (290)
GREATER_EQ_OP (291)
NOT_EQ_OP (292)
EQUALITY_OP (293)
LESS_OP (294)
GREATER_OP (295)
EQUAL_OP (296)
INCREMENT_OP (297)
DECREMENT_OP (298)
MULTIPLY_OP (299)
DIVIDE_OP (300)
SUB_OP (301)
ADD_OP (302)
MOD_OP (303)
POW_OP (304)
INT_LITERAL (305)
FLOAT_LITERAL (306)
STR_LITERAL (307)
CHAR_LITERAL (308)
COMMA (309) 9
SEMICOLON (310)
LEFT_PARANT (311) 3
RIGHT_PARANT (312) 3
CURLY_OPEN (313)
CURLY_CLOSE (314)
NEW_LINE (315)
WHITE_SPACE (316)
UNKNOWN_CHAR (317)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
program (64)
    on left: 1 2, on right: 0 2
function (65)
    on left: 3, on right: 1 2
return_type (66)
    on left: 4 5, on right: 3
parameter_list (67)
    on left: 6 7 8 9, on right: 3 9
data_type (68)
    on left: 10 11 12 13 14, on right: 4 8 9
empty (69)
    on left: 15, on right: 5 6


State 0

    0 $accept: . program $end

    FUNC  shift, and go to state 1

    program   go to state 2
    function  go to state 3


State 1

    3 function: FUNC . return_type IDENT LEFT_PARANT parameter_list RIGHT_PARANT

    CHAR   shift, and go to state 4
    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    BOOL   shift, and go to state 7
    STR    shift, and go to state 8

    $default  reduce using rule 15 (empty)

    return_type  go to state 9
    data_type    go to state 10
    empty        go to state 11


State 2

    0 $accept: program . $end

    $end  shift, and go to state 12


State 3

    1 program: function .
    2        | function . program

    FUNC  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program   go to state 13
    function  go to state 3


State 4

   10 data_type: CHAR .

    $default  reduce using rule 10 (data_type)


State 5

   11 data_type: INT .

    $default  reduce using rule 11 (data_type)


State 6

   12 data_type: FLOAT .

    $default  reduce using rule 12 (data_type)


State 7

   13 data_type: BOOL .

    $default  reduce using rule 13 (data_type)


State 8

   14 data_type: STR .

    $default  reduce using rule 14 (data_type)


State 9

    3 function: FUNC return_type . IDENT LEFT_PARANT parameter_list RIGHT_PARANT

    IDENT  shift, and go to state 14


State 10

    4 return_type: data_type .

    $default  reduce using rule 4 (return_type)


State 11

    5 return_type: empty .

    $default  reduce using rule 5 (return_type)


State 12

    0 $accept: program $end .

    $default  accept


State 13

    2 program: function program .

    $default  reduce using rule 2 (program)


State 14

    3 function: FUNC return_type IDENT . LEFT_PARANT parameter_list RIGHT_PARANT

    LEFT_PARANT  shift, and go to state 15


State 15

    3 function: FUNC return_type IDENT LEFT_PARANT . parameter_list RIGHT_PARANT

    CHAR   shift, and go to state 4
    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    BOOL   shift, and go to state 7
    STR    shift, and go to state 8
    VOID   shift, and go to state 16

    $default  reduce using rule 15 (empty)

    parameter_list  go to state 17
    data_type       go to state 18
    empty           go to state 19


State 16

    7 parameter_list: VOID .

    $default  reduce using rule 7 (parameter_list)


State 17

    3 function: FUNC return_type IDENT LEFT_PARANT parameter_list . RIGHT_PARANT
    9 parameter_list: parameter_list . COMMA data_type IDENT

    COMMA         shift, and go to state 20
    RIGHT_PARANT  shift, and go to state 21


State 18

    8 parameter_list: data_type . IDENT

    IDENT  shift, and go to state 22


State 19

    6 parameter_list: empty .

    $default  reduce using rule 6 (parameter_list)


State 20

    9 parameter_list: parameter_list COMMA . data_type IDENT

    CHAR   shift, and go to state 4
    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    BOOL   shift, and go to state 7
    STR    shift, and go to state 8

    data_type  go to state 23


State 21

    3 function: FUNC return_type IDENT LEFT_PARANT parameter_list RIGHT_PARANT .

    $default  reduce using rule 3 (function)


State 22

    8 parameter_list: data_type IDENT .

    $default  reduce using rule 8 (parameter_list)


State 23

    9 parameter_list: parameter_list COMMA data_type . IDENT

    IDENT  shift, and go to state 24


State 24

    9 parameter_list: parameter_list COMMA data_type IDENT .

    $default  reduce using rule 9 (parameter_list)
